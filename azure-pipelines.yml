trigger:
  - main

pool:
  name: Continuous Integration
  demands:
    - Agent.OS -equals Linux

variables:
  - name: MajorMinor
    value: "0.0"
  - name: Patch
    value: $[counter(variables.MajorMinor, 67)]
  - name: Release
    value: $(MajorMinor).$(Patch)

name: $(Build.DefinitionName)-${{variables.Release}}

stages:
  - stage: CI
    jobs:
      - job: Build_Test_Publish
        steps:
          - bash: |
              sed 's/file\:dist\/ngx-twcss/0.0.x/g' -i package.json
              yarn
            displayName: "Setup"
            env:
              YARN_ENABLE_IMMUTABLE_INSTALLS: false

          - script: |
              yarn build
            displayName: "Build"

          - script: |
              Xvfb -ac :0 -screen 0 1280x1024x16 -nolisten unix & export DISPLAY=:0
              yarn test:ci
            displayName: "Test"

          - publish: $(Build.SourcesDirectory)/dist/ngx-twcss
            artifact: drop
            displayName: "Publish artifact"

          - task: PublishTestResults@2
            displayName: "Publish test results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TESTS-*.xml"
              searchFolder: "$(Build.SourcesDirectory)"
              mergeTestResults: true
              testRunTitle: "Test-results-$(Build.DefinitionName)-$(Release)"

          - task: PublishCodeCoverageResults@2
            displayName: "Publish code coverage"
            inputs:
              summaryFileLocation: "$(Build.SourcesDirectory)/coverage/ngx-twcss/cobertura.xml"
              pathToSources: "$(Build.SourcesDirectory)/coverage/ngx-twcss"

  - stage: CD
    dependsOn: CI
    jobs:
      - job: Release
        steps:
          - download: current
            artifact: drop
            displayName: Download artifact

          - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
              - script: |
                  sed 's/0.0.0-placeholder/$(Release)/g' -i package.json
                  echo "Release$(cat package.json | grep version)"
                  npm config set //registry.npmjs.org/:_authToken=$(authToken)
                  npm publish
                displayName: "Release $(Release)"
                workingDirectory: $(Pipeline.Workspace)/drop

          - ${{ elseif eq(variables['Build.SourceBranchName'], 'next') }}:
              - script: |
                  release_version=$(Release)-next.$(git rev-parse --short HEAD)
                  sed 's/0.0.0-placeholder/$release_version/g' -i package.json
                  echo "Release$(cat package.json | grep version)"
                  npm config set //registry.npmjs.org/:_authToken=$(authToken)
                  npm publish --tag next
                displayName: "Release $(Release)"
                workingDirectory: $(Pipeline.Workspace)/drop

          - ${{ else }}:
              - script: |
                  release_version=$(Release)-insiders.$(git rev-parse --short HEAD)
                  sed 's/0.0.0-placeholder/$release_version/g' -i package.json
                  echo "Release$(cat package.json | grep version)"
                  npm config set //registry.npmjs.org/:_authToken=$(authToken)
                  npm publish --tag insiders
                displayName: "Release $(Release)"
                workingDirectory: $(Pipeline.Workspace)/drop
