trigger:
  - main
  - next
  - feat/*
  - fix/*

pool:
  name: Continuous Integration
  demands:
    - Agent.OS -equals Linux

variables:
  - name: MajorMinor
    value: "0.0"
  - name: Patch
    value: $[counter(variables.MajorMinor, 67)]
  - name: Release
    value: $(MajorMinor).$(Patch)

name: $(Build.DefinitionName)-${{variables.Release}}

stages:
  - stage: CI
    jobs:
      - job: Build_Test_Publish
        steps:
          - task: Cache@2
            inputs:
              key: 'yarn | "$(Agent.OS)" | yarn.lock'
              path: '$(Build.SourcesDirectory)/.yarn'
              cacheHitVar: 'CACHE_RESTORED'
            displayName: Cache Yarn packages

          - bash: |
              sed '/file\:dist\/ngx-twcss/d' -i package.json
              yarn
            displayName: "Setup"
            condition: ne(variables.CACHE_RESTORED, 'true')
            env:
              YARN_ENABLE_IMMUTABLE_INSTALLS: false

          - script: |
              yarn build
            displayName: "Build"

          - script: |
              Xvfb -ac :0 -screen 0 1280x1024x16 -nolisten unix & export DISPLAY=:0
              yarn test:ci
            displayName: "Test"

          - publish: $(Build.SourcesDirectory)/dist/ngx-twcss
            artifact: drop
            displayName: "Publish build artifact"

          - task: PublishTestResults@2
            displayName: "Publish test results"
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/TESTS-*.xml"
              searchFolder: "$(Build.SourcesDirectory)"
              mergeTestResults: true
              testRunTitle: "Test-results-$(Build.DefinitionName)-$(Release)"

          - task: PublishCodeCoverageResults@2
            displayName: "Publish code coverage"
            inputs:
              summaryFileLocation: "$(Build.SourcesDirectory)/coverage/ngx-twcss/cobertura.xml"
              pathToSources: "$(Build.SourcesDirectory)/coverage/ngx-twcss"

  - ${{ if or(in(variables['Build.SourceBranchName'], 'main', 'next'), or(contains(variables['Build.SourceBranch'], 'feat/'), contains(variables['Build.SourceBranch'], 'fix/'))) }}:
    - stage: CD
      dependsOn: CI
      jobs:
        - job: Release
          steps:
            - checkout: none
            - download: current
              artifact: drop
              displayName: Download build artifact

            - ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
                - script: |
                    sed 's/0.0.0-placeholder/$(Release)/g' -i package.json
                    npm config set //registry.npmjs.org/:_authToken=$(authToken)
                    npm publish
                  displayName: "Release v$(Release)-latest"
                  workingDirectory: $(Pipeline.Workspace)/drop

            - ${{ elseif eq(variables['Build.SourceBranchName'], 'next') }}:
                - script: |
                    sed 's/0.0.0-placeholder/$(Release)-next/g' -i package.json
                    npm config set //registry.npmjs.org/:_authToken=$(authToken)
                    npm publish --tag next
                  displayName: "Release v$(Release)-next"
                  workingDirectory: $(Pipeline.Workspace)/drop

            - ${{ else }}:
                - script: |
                    sed 's/0.0.0-placeholder/$(Release)-insiders/g' -i package.json
                    npm config set //registry.npmjs.org/:_authToken=$(authToken)
                    npm publish --tag insiders
                  displayName: "Release v$(Release)-insiders"
                  workingDirectory: $(Pipeline.Workspace)/drop
