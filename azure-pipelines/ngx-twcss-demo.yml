trigger:
  branches:
    include:
      - main
  paths:
    include:
      - src/*
      - azure-pipelines/*demo.yml

pool:
  name: Continuous Integration
  demands:
    - Agent.OS -equals Linux
    - AZP_RUNS -equals ngx-twcss-demo

parameters:
  - name: ReleaseTag
    type: string
    default: "latest"
    values:
      - "latest"
      - "next"
      - "insiders"
    displayName: "Release Tag"

stages:
  - stage: CI
    jobs:
      - job: Build
        steps:
          - task: Cache@2
            inputs:
              key: 'puppeteer | $(Agent.OS) | $(AZP_RUNS)'
              path: '$(HOME)/.cache/puppeteer'
              cacheHitVar: 'CHROME_RESTORED'
            displayName: "Cache puppeteer"

          - task: Cache@2
            inputs:
              key: 'yarn | chrome | $(Agent.OS) | $(AZP_RUNS)'
              path: '$(Build.SourcesDirectory)/.yarn'
              cacheHitVar: 'YARN_RESTORED'
            displayName: "Cache yarn"

          - task: Cache@2
            inputs:
              key: 'node_modules | $(Agent.OS) | $(AZP_RUNS)'
              path: '$(Build.SourcesDirectory)/node_modules'
              cacheHitVar: 'NODE_MODULE_RESTORED'
            displayName: "Cache node_modules"

          - bash: |
              sed "/file\:dist\/ngx-twcss/d" -i package.json
              yarn add ngx-twcss@${{ parameters.ReleaseTag }}
              if [ -f yarn.lock ]; then rm yarn.lock; fi
              touch yarn.lock
              yarn set version latest
              yarn
            displayName: "Setup"
            condition: and(ne(variables.CHROME_RESTORED, 'true'), ne(variables.YARN_RESTORED, 'true'), ne(variables.NODE_MODULE_RESTORED, 'true'))

          - script: |
              yarn build:demo
            displayName: "Build"

          - publish: $(Build.SourcesDirectory)/dist/ngx-twcss-demo
            artifact: drop
            displayName: "Publish artifact"

  - stage: CD
    dependsOn: CI
    jobs:
      - job: Release
        steps:
          - checkout: none

          - download: current
            artifact: drop
            displayName: Download build artifact

          - script: |
              # Remove the previous latest release
              rm -rf /azp/www/ngx-twcss/blue/*
              # Copy the current latest release to the blue directory
              cp -r /azp/www/ngx-twcss/green/* /azp/www/ngx-twcss/blue
              # Copy the new release to the green directory
              cp -rf . /azp/www/ngx-twcss/green
            displayName: "Update demo website"
            workingDirectory: $(Pipeline.Workspace)/drop
